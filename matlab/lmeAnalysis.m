%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MISTIC Robotic Suturing Study â€” Linear Mixed Effects (LME) Analysis
%
% Description:
%   Performs LME analyses for evaluating:
%     1) Multimodality haptic feedback (feedback vs. no feedback)
%     2) Objective skill assessment (novice, intermediate, expert groups)
%
%   Supports selection of metric source and type, with optional LME
%   assumption plots and figure export options.
%
% Inputs:
%   - Study set: 'multimodality' or 'skillassessment'
%   - Metric source: 'platform', 'tool', 'psm', 'ecm'
%   - Metric type: 'force', 'accel', 'speed', 'pathlen'
%
% Features:
%   - Customizable flags for figure export, overwriting, and trial splits
%   - Plots of LME assumption checks
%   - GUI for interactive configuration
%
% Author: Sergio Machaca
% Contact: smachac2@jh.edu
% Created: 01 June 2025
% Last Updated: 27 June 2025
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% ====================== SETUP ======================

clear; close all; clc;

% ============= Settings =============
[studySet, metricSource, metricType, flags] = chooseMetricsGUI();
validInput = isstruct(flags) && ...
             isfield(flags, 'exportFig') && ...
             isfield(flags, 'figFormat') && ...
             ~isempty(studySet) && ~isempty(metricSource) && ~isempty(metricType);
if ~validInput
    return;
end

% Set font properties
set(groot, 'defaultTextInterpreter', 'latex');
set(groot, 'defaultAxesTickLabelInterpreter', 'latex');
set(groot, 'defaultLegendInterpreter', 'latex');
set(groot, 'defaultAxesFontSize', 18);
set(groot, 'defaultTextFontSize', 18);

% Set root directories
% dataDir = fullfile('..', 'data');
dataDir = fullfile('/Volumes/drakes_ssd_500gb/skill_assessment/data')
% protocolDir = fullfile('..', 'protocol');
protocolDir = fullfile('/Volumes/drakes_ssd_500gb/skill_assessment/mistic_suturing_study/protocol')
figDir = fullfile('..', 'figures');

% Import data
fbTable = readtable(fullfile(protocolDir, 'feedback_matrix.csv'),...
    'ReadVariableNames', true, 'PreserveVariableNames', true);
fbTable = movevars(fbTable, 'Participant', 'Before', 1);
fbTable = rmmissing(fbTable);

inclTable = readtable(fullfile(protocolDir, 'trial_inclusion_matrix.csv'),...
    'ReadVariableNames', true, 'PreserveVariableNames', true);
inclTable = movevars(inclTable, 'Participant', 'Before', 1);

% Replace empty cells with NaN
for col = 1:width(inclTable)
    if iscell(inclTable{:,col})
        inclTable{cellfun(@isempty, inclTable{:,col}), col} = {NaN};
    end
end

% Package data into struct
dataBundle.dataDir = dataDir;
dataBundle.inclTable = inclTable;
dataBundle.fbTable = fbTable;
dataBundle.metricSource = metricSource;
dataBundle.metricType = metricType;
dataBundle.plotCrop = flags.plotCrop;

% Extract data and preprocess
[data, validData] = importPreprocessData(dataBundle);

% Define skill group classifiers
pStatus = inclTable(:, {'Participant', 'Status'});
statusLower = lower(string(pStatus.Status));
SkillGroup = repmat("unknown", height(pStatus), 1);
isNovice = ...
    contains(statusLower, "pgy1") |...
    contains(statusLower, "pgy2") |...
    contains(statusLower, "pgy3") |...
    contains(statusLower, "pgy4") |...
    contains(statusLower, "pgy5") |...
    contains(statusLower, "research");
isIntermediate = ...
    contains(statusLower, "educator");
isExpert = ...
    contains(statusLower, "expert");

SkillGroup(isNovice) = "Novice";
SkillGroup(isIntermediate) = "Intermediate";
SkillGroup(isExpert) = "Expert";

% Add skill group as categorical
pStatus.SkillGroup = categorical(SkillGroup, ["Novice", "Intermediate", "Expert"]);

% Merge skill groups into main table
dataSkillAssessment = innerjoin(data,...
    pStatus(:, {'Participant', 'SkillGroup'}), ...
    'LeftKeys', 'Participant', 'RightKeys', 'Participant');


switch studySet
% ===================== MULTIMODALITY STUDY =====================
    case 'multimodality'
        % Remove experts and intermediates (no haptic feedback)
        dataMultimodality = dataSkillAssessment(dataSkillAssessment.SkillGroup == 'Novice',:);

        % Display summarized group counts
        inclTable = inclTable(ismember(inclTable.Participant, dataMultimodality.Participant), :);
        [groupCounts, groupNames] = groupcounts(string(inclTable.Status));
        fprintf('\nParticipant counts by experience level and specialty:\n');
        for i = 1:numel(groupNames)
            fprintf('  %s: %d\n', groupNames(i), groupCounts(i));
        end
        fprintf('%s: %d\n\n', 'Total', sum(groupCounts));

        % Apply trial renumbering if using 3-trial version
        if flags.useThreeTrialSplit
            
            % Select rows corresponding to fb and no fb groups
            dataH = dataMultimodality(dataMultimodality.Feedback == 'H',:);
            dataN = dataMultimodality(dataMultimodality.Feedback == 'N',:);
        
            % Renumber trials
            dataH.NormalizedTrial =...
                repmat([1;2;3], ceil(height(dataH.Trial)/3), 1);
            dataN.NormalizedTrial =...
                repmat([1;2;3], ceil(height(dataN.Trial)/3), 1);
        
            % Combine back together
            dataMultimodality = [dataH; dataN];
        
            % Sort to preserve original participant/trial order
            dataMultimodality = sortrows(dataMultimodality, {'Participant','Trial'});
        end
        
        % =============== LMEs for MULTIMODALITY STUDY ===============
        switch metricSource
            case 'platform'
                switch metricType
                    case 'force'
                        % ========== LME: PLATFORM FORCES ==========
                        params = struct( ...
                            'data', dataMultimodality, ...
                            'studySet', 'multimodality', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'PlatformForce', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                end

            case 'tool'
                switch metricType
                    case 'force'
                        % ========== LME: TOOL FORCES ==========
                        params = struct( ...
                            'data', dataMultimodality, ...
                            'studySet', 'multimodality', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'ToolForce', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                        
    
                    case 'accel'
                        % ========== LME: TOOL ACCELERATIONS ==========
                        params = struct( ...
                            'data', dataMultimodality, ...
                            'studySet', 'multimodality', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'ToolAccel', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                end

            case 'psm'
                switch metricType
                    case 'speed'
                        % ========== LME: PSM SPEED ==========
                        params = struct( ...
                            'data', dataMultimodality, ...
                            'studySet', 'multimodality', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'PSMSpeed', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                    
                    case 'pathlen'
                        % ========== LME: PSM PATH LENGTH ==========
                        params = struct( ...
                            'data', dataMultimodality, ...
                            'studySet', 'multimodality', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'PSMPathLen', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                end
    
            case 'ecm'
                switch metricType
                    case 'speed'
                        % ========== LME: ECM SPEED ==========
                        params = struct( ...
                            'data', dataMultimodality, ...
                            'studySet', 'multimodality', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'ECMSpeed', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
    
                    case 'pathlen'
                        % ========== LME: ECM PATH LENGTH ==========
                        params = struct( ...
                            'data', dataMultimodality, ...
                            'studySet', 'multimodality', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'ECMPathLen', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                end
        end

        % ========== LME: TASK COMPLETION TIME ==========
        params = struct( ...
            'data', dataMultimodality, ...
            'studySet', 'multimodality', ...
            'metricSource', 'tasktime', ...
            'metricType', 'tasktime', ...
            'metricLabel', 'TaskTime', ...
            'plotAssumptions', flags.plotAssumptions, ...
            'exportLME', flags.exportLME, ...
            'overwriteLME', flags.overwriteLME, ...
            'exportFig', flags.exportFig, ...
            'figFormat', flags.figFormat, ...
            'overwriteFig', flags.overwriteFig ...
        );
        runLME(params);



% ===================== SKILL ASSESSMENT STUDY =====================
    case 'skillassessment'

        % Display summarized group counts
        [groupCounts, groupNames] = groupcounts(string(inclTable.Status));
        fprintf('\nParticipant counts by experience level and specialty:\n');
        for i = 1:numel(groupNames)
            fprintf('  %s: %d\n', groupNames(i), groupCounts(i));
        end
        [groupCounts, groupNames] = groupcounts(string(dataSkillAssessment.SkillGroup));
        fprintf('\nParticipant counts by skill group:\n');
        for i = 1:numel(groupNames)
            fprintf('  %s: %d\n', groupNames(i), groupCounts(i)/6);
        end
        fprintf('\n%s: %d\n\n', 'Total participants', sum(groupCounts/6));

        % =============== LMEs for SKILL ASSESSMENT STUDY ===============
        switch metricSource
            case 'platform'
                switch metricType
                    case 'force'
                        % ========== LME: PLATFORM FORCES ==========
                        params = struct( ...
                            'data', dataSkillAssessment, ...
                            'studySet', 'skillassessment', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'PlatformForce', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                end

            case 'tool'
                switch metricType
                    case 'force'
                        % ========== LME: TOOL FORCES ==========
                        params = struct( ...
                            'data', dataSkillAssessment, ...
                            'studySet', 'skillassessment', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'ToolForce', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);

                    case 'accel'
                        % ========== LME: TOOL ACCELERATIONS ==========
                        params = struct( ...
                            'data', dataSkillAssessment, ...
                            'studySet', 'skillassessment', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'ToolAccel', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                end

            case 'psm'
                switch metricType
                    case 'speed'
                        % ========== LME: PSM SPEED ==========
                        params = struct( ...
                            'data', dataSkillAssessment, ...
                            'studySet', 'skillassessment', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'PSMSpeed', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                        
                    case 'pathlen'
                        % ========== LME: PSM PATH LENGTH ==========
                        params = struct( ...
                            'data', dataSkillAssessment, ...
                            'studySet', 'skillassessment', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'PSMPathLen', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                end

            case 'ecm'
                switch metricType
                    case 'speed'
                        % ========== LME: ECM SPEED ==========
                        params = struct( ...
                            'data', dataSkillAssessment, ...
                            'studySet', 'skillassessment', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'ECMSpeed', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                        
                    case 'pathlen'
                        % ========== LME: ECM PATH LENGTH ==========
                        params = struct( ...
                            'data', dataSkillAssessment, ...
                            'studySet', 'skillassessment', ...
                            'metricSource', metricSource, ...
                            'metricType', metricType, ...
                            'metricLabel', 'ECMPathLen', ...
                            'plotAssumptions', flags.plotAssumptions, ...
                            'exportLME', flags.exportLME, ...
                            'overwriteLME', flags.overwriteLME, ...
                            'exportFig', flags.exportFig, ...
                            'figFormat', flags.figFormat, ...
                            'overwriteFig', flags.overwriteFig ...
                        );
                        runLME(params);
                end
        end
    
        % ========== LME: TASK COMPLETION TIME ==========
        params = struct( ...
            'data', dataSkillAssessment, ...
            'studySet', 'skillassessment', ...
            'metricSource', 'tasktime', ...
            'metricType', 'tasktime', ...
            'metricLabel', 'TaskTime', ...
            'plotAssumptions', flags.plotAssumptions, ...
            'exportLME', flags.exportLME, ...
            'overwriteLME', flags.overwriteLME, ...
            'exportFig', flags.exportFig, ...
            'figFormat', flags.figFormat, ...
            'overwriteFig', flags.overwriteFig ...
        );
        runLME(params);

end